-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.add_team(IN tid text,IN name text,IN user_id uuid)
    RETURNS uuid
    LANGUAGE 'plpgsql'
    VOLATILE
    PARALLEL UNSAFE
    COST 100
    
AS $BODY$

declare
    new_team_id uuid;
begin
    new_team_id:=(select extensions.uuid_generate_v4());

    insert into teams(id, tid, name)
    values (new_team_id, add_team.tid, add_team.name);

    insert into members(team_id, user_id, permission_level)
    values (new_team_id, add_team.user_id, 'owner');

    return new_team_id;
end;
$BODY$;

ALTER TABLE IF EXISTS public.members
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable insert for authenticated users only"
    ON public.members
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));


CREATE POLICY "Enable access to all users"
    ON public.members
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = user_id));

ALTER TABLE IF EXISTS public.teams
    ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can select teams if they belong to the team"
    ON public.teams
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() IN ( SELECT members.user_id
   FROM members
  WHERE (members.team_id = teams.id))));

CREATE POLICY "Enable insert for authenticated users only"
    ON public.teams
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
